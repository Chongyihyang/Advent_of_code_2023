pub mod aoc13_1 {
    use crate::AOC13::aoc13_2::scan_row;
    use crate::python_builtins::builtins::read;

    pub fn scan(input: &Vec<String>, num: usize, size: usize) -> u32 {
        let (mut left, mut right) = (num - 1, num);
        let mut counter = 0u32;
        loop {
            if input[left] == input[right]{
                counter += 1;
                if left == 0 || right == size - 1 {
                    break
                }
                left -= 1;
                right += 1;
            } else {
                counter = 0;
                break;
            }
        }
        counter
    }

    pub enum Option {
        Rows,
        Columns,
        None
    }

    pub fn each_pattern(contents: &String) -> (u32, Option) {
        let rows: Vec<_> = contents.lines().map(|x| x.to_string()).collect();
        let mut columns = vec![];
        for i in (0..rows[0].len()){
            let tmp: String = contents.lines().map(|x| x[i..i+1].to_string()).collect();
            columns.push(tmp);
        }
        let (rows_len, col_len) = (rows.len(), columns.len());
        let (mut rows_counter, mut cols_counter) = (0, 0);
        let (mut cols_, mut rows_) = (0, 0);

        // we start the procedure from right to left
        for i in (1..rows[0].len()).rev(){
            //println!("{}, cols", i);
            cols_counter = scan(&columns, i, col_len);
            if cols_counter != 0 {
                cols_ = i;
                break
            }
        }

        // we start the procedure from bottom to top
        rows_counter = scan_row(&rows, false);

        return if rows_counter != 0 {
            ((rows_ * 100) as u32, Option::Rows)
        } else if cols_counter != 0{
            (cols_ as u32, Option::Columns)
        } else {
            (0, Option::None)
        }
    }

    pub fn main13_1() {
        let contents = read("AOC13.txt");
        let patterns: Vec<_> = contents.split("\r\n\r\n")
            .map(|x| x.to_string()).collect();
        let mut counter = 0u32;
        for pattern in patterns{
            counter += each_pattern(&pattern).0;
        }
        println!("{counter}");
    }
}

pub mod aoc13_2 {
    use crate::AOC13::aoc13_1::{each_pattern, Option, scan};
    use crate::python_builtins::builtins::read;
    use std::iter::zip;

    pub fn almost_the_same<'a>(str1: &'a str, str2: &'a str) -> bool {
        let mut one_try = false;
        for (i, j) in zip(str1.chars(), str2.chars()) {
            if i != j {
                if one_try == false {
                    one_try = true
                } else {
                    return false;
                }
            }
        }
        true
    }

    pub fn try_scan(input: &Vec<String>, num: usize, size: usize) -> u32 {
        let mut one_try = false;
        let (mut left, mut right) = (num - 1, num);
        let mut counter = 0u32;
        loop {
            if input[left] == input[right]{
                counter += 1;
                if left == 0 || right == size - 1 {
                    break
                }
                left -= 1;
                right += 1;
            } else if one_try == false &&
                almost_the_same(&input[left] ,&input[right]){
                one_try = true;
                counter += 1;
            } else {
                counter = 0;
                break;
            }
        }
        counter
    }

    pub fn scan_row(rows: &Vec<String>, try_scan_: bool) -> u32{
        let mut rows_counter = 0;
        let rows_len = rows.len();
        let mut rows_ = 0;
        for i in (1..rows.len()).rev(){
            //println!("{}, Rows", i);
            if try_scan_ {
                rows_counter = try_scan(&rows, i, rows_len);
            } else {
                rows_counter = scan(&rows, i, rows_len);
            }
            if rows_counter != 0 {
                rows_ = i;
                break
            }
        }
        rows_counter
    }

    pub fn scan_col(cols: &Vec<String>) {
        let mut cols_counter = .len();
        for i in (1..rows[0].len()).rev(){
            //println!("{}, cols", i);
            cols_counter = try_scan(&columns, i, col_len);
            if cols_counter != 0 {
                cols_ = i;
                break
            }
    }

    pub fn main13_2() {
        let contents = read("AOC13.txt");
        let patterns: Vec<_> = contents.split("\r\n\r\n")
            .map(|x| x.to_string()).collect();
        let mut counter = 0u32;
        for pattern in patterns{
            let rows: Vec<_> = contents.lines().map(|x| x.to_string()).collect();
            let (mut rows_counter, mut cols_counter) = (0, 0);
            let (mut rows_, mut cols_) = (0,0);
            let mut columns = vec![];
            for i in (0..rows[0].len()){
                let tmp: String = contents.lines().map(|x| x[i..i+1].to_string()).collect();
                columns.push(tmp);
            }
            let (rows_len, col_len) = (rows.len(), columns.len());
            match each_pattern(&pattern).1{
                Option::Rows => {
                    for i in (1..rows[0].len()).rev(){
                        //println!("{}, cols", i);
                        cols_counter = try_scan(&columns, i, col_len);
                        if cols_counter != 0 {
                            cols_ = i;
                            break
                        }
                    }
                }
                Option::Columns => {
                    for i in (1..rows.len()).rev(){
                        //println!("{}, Rows", i);
                        rows_counter = scan(&rows, i, rows_len);
                        if rows_counter != 0 {
                            rows_ = i;
                            break
                        }
                    }
                }
                Option::None => {
                    for i in (1..rows[0].len()).rev(){
                        //println!("{}, cols", i);
                        cols_counter = try_scan(&columns, i, col_len);
                        if cols_counter != 0 {
                            cols_ = i;
                            break
                        }
                    }
                    for i in (1..rows.len()).rev(){
                        //println!("{}, Rows", i);
                        rows_counter = scan(&rows, i, rows_len);
                        if rows_counter != 0 {
                            rows_ = i;
                            break
                        }
                    }
                    if rows_counter != 0 {
                        (rows_ * 100) as u32
                    } else if cols_counter != 0{
                        (cols_ as u32
                    } else {
                        (0
                    }
                }
            }
        }
        println!("{counter}");
    }
}






pub mod aoc13_1 {
    use crate::AOC13::aoc13_2::scan_per_line;
    use crate::python_builtins::builtins::read;

    pub fn scan(input: &Vec<String>, num: usize, size: usize) -> u32 {
        let (mut left, mut right) = (num - 1, num);
        let mut counter = 0u32;
        loop {
            if input[left] == input[right]{
                counter += 1;
                if left == 0 || right == size - 1 {
                    break
                }
                left -= 1;
                right += 1;
            } else {
                counter = 0;
                break;
            }
        }
        counter
    }

    pub enum Option {
        Rows,
        Columns,
        None
    }

    pub fn each_pattern(contents: &String) -> (u32, Option) {
        let rows: Vec<_> = contents.lines().map(|x| x.to_string()).collect();
        let mut columns = vec![];
        for i in (0..rows[0].len()){
            let tmp: String = contents.lines().map(|x| x[i..i+1].to_string()).collect();
            columns.push(tmp);
        }
        let (mut rows_counter, mut cols_counter) = (0, 0);
        let (mut cols_, mut rows_) = (0, 0);

        // we start the procedure from right to left
        cols_counter = scan_per_line(&columns, false);

        // we start the procedure from bottom to top
        rows_counter = scan_per_line(&rows, false);

        return if rows_counter != 0 {
            ((rows_ * 100) as u32, Option::Rows)
        } else if cols_counter != 0{
            (cols_ as u32, Option::Columns)
        } else {
            (0, Option::None)
        }
    }

    pub fn main13_1() {
        let contents = read("AOC13.txt");
        let patterns: Vec<_> = contents.split("\r\n\r\n")
            .map(|x| x.to_string()).collect();
        let mut counter = 0u32;
        for pattern in patterns{
            counter += each_pattern(&pattern).0;
        }
        println!("{counter}");
    }
}

pub mod aoc13_2 {
    use crate::AOC13::aoc13_1::{each_pattern, Option, scan};
    use crate::python_builtins::builtins::read;
    use std::iter::zip;

    pub fn almost_the_same<'a>(str1: &'a str, str2: &'a str) -> bool {
        let mut one_try = false;
        for (i, j) in zip(str1.chars(), str2.chars()) {
            if i != j {
                if one_try == false {
                    one_try = true
                } else {
                    return false;
                }
            }
        }
        true
    }

    pub fn try_scan(input: &Vec<String>, num: usize, size: usize) -> u32 {
        let mut one_try = false;
        let (mut left, mut right) = (num - 1, num);
        let mut counter = 0u32;
        loop {
            if input[left] == input[right]{
                counter += 1;
                if left == 0 || right == size - 1 {
                    break
                }
                left -= 1;
                right += 1;
            } else if one_try == false &&
                almost_the_same(&input[left] ,&input[right]){
                one_try = true;
                counter += 1;
            } else {
                counter = 0;
                break;
            }
        }
        counter
    }


    pub fn scan_per_line(cols: &Vec<String>, try_scan_: bool) -> u32{
        let mut cols_counter = 0;
        let col_len = cols.len();
        let mut cols_ = 0;
        for i in (1..colsy.len()).rev(){
            //println!("{}, cols", i);
            if try_scan_{
                cols_counter = try_scan(&cols, i, col_len);
            } else {
                cols_counter = scan(&cols, i, col_len);
            }
            if cols_counter != 0 {
                cols_ = i;
                break
            }
        }
        cols_counter
    }

    pub fn main13_2() {
        // let contents = read("AOC13.txt");
        // let patterns: Vec<_> = contents.split("\r\n\r\n")
        //     .map(|x| x.to_string()).collect();
        // let mut counter = 0u32;
        // for pattern in patterns{
        //     let rows: Vec<_> = contents.lines().map(|x| x.to_string()).collect();
        //     let (mut rows_counter, mut cols_counter) = (0, 0);
        //     let (mut rows_, mut cols_) = (0,0);
        //     let mut columns = vec![];
        //     for i in (0..rows[0].len()){
        //         let tmp: String = contents.lines().map(|x| x[i..i+1].to_string()).collect();
        //         columns.push(tmp);
        //     }
        //     let (rows_len, col_len) = (rows.len(), columns.len());
        //     match each_pattern(&pattern).1{
        //         Option::Rows => {
        //         }
        //         Option::Columns => {
        //         }
        //         Option::None => {}
        //     }
        // }
        // println!("{counter}");
    }
}